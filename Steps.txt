Steps for tags
1)	Go to learngit repo
2)	Check the status
3)	Check the oneliner log
4)	Find out which commit is to be added with a tag
5)	Run the lightweight tag command with the commit id
6)	Now run the oneliner log again
7)	The tag is reflected with a yellow color shade
8)	Find out one more commit id which is to be added with a tag
9)	Run the Annotated tag command with the commit id and the message
10)	Run the tag list command
11)	Tags with messages will be displayed
12)	Let’s delete one of the tag using tag deleting command
13)	Run the oneliner log to verify if the tag is visible on the log
14)	Run the tag list command to verify if we have successfully deleted the tag.

Steps for Stashing
1)	Go to learngit repo
2)	Create a new file – stash1.txt
3)	Add a heading in the file
4)	Commit the file
5)	Create a new file – stash2.txt
6)	Add a heading in the file
7)	Run the status
8)	File is visible in untracked stage
9)	Now run the stash command for a file
10)	Git will reject it
11)	Now add the stash2.txt to staging area
12)	Now run the stash command for a file again
13)	Your file is stashed
14)	Now edit stash1.txt
15)	Run the status
16)	File in unstaged zone
17)	Now run the stash command
18)	Your file is stashed
19)	Run the status
20)	Now check the files in stashing space
21)	Get the stash2.txt back to working directory using the pop command
22)	Make the pending changes in the file and commit the file
23)	Now get the stash1.txt popped out from stashing space
24)	Make the pending changes and commit the file.
25)	Now edit the stash2.txt
26)	Run the status
27)	File is in unstaged area
28)	Run the stash command
29)	See the stash list
30)	Run the delete stash command
31)	See the stash list
32)	The modified changes and the stashed file are deleted
33)	File is still in the repo but with old content.


Steps for Clean
1)	Go to learngit repo
2)	Run the status
3)	Add a new file
4)	Run the status
5)	File in the untracked area
6)	Now run the command to remove the file
7)	Run the status
8)	File removed
9)	Add a directory and a file inside the directory
10)	Add a file outside the directory
11)	Now run the clean command to remove the directory and files
12)	Run the status file and directory is removed successfully
13)	Add a directory and a file inside the directory
14)	Add a file outside the directory
15)	Now run the clean command to remove the directory and files along with ignored files
16)	Run the status file and directory is removed successfully

Steps for RM
1)	Go to learngit repo
2)	Run status
3)	Add a new file testrm1.txt
4)	Commit the change
5)	Run the status
6)	Run the rm command to delete testrm1.txt
7)	File is deleted
8)	Run the status
9)	Now add a new file testrm2.txt and commit it
10)	Now run the status
11)	Now run the command for removing the file but without deleting it from the repo
12)	Run the status
13)	Same file now visible in unstaged and staged area
14)	Just commit the file from staging area keeping the unstaged file as it is
15)	Run the status
16)	Record of deletion moved to the commit
17)	New file is in untracked area
18)	Add the same file name testrm2.txt in the .gitignore
19)	Now run the status
20)	Now the file is not visible instead .gitignore is visible as modified
21)	Run the commit for .gitignore
22)	Run the status
23)	Now the file is never going to be a part of the repo further. 
24)	History of that file is over.

Steps for Reset
1)	Go to learngit repo
2)	Add a new file reset.txt
3)	Add a heading – “Welcome to Git and Github Course”
4)	Check the status
5)	Commit the changes
6)	Modify reset.txt by adding second line – “Instructor-led Learning!”
7)	Check the status
8)	Commit the changes
9)	Now you have two commits for the same file
10)	Add another commit with line 3 – “By Abhresh”
11)	Run the mixed reset command and go to 1st commit
12)	Run the status – File should be in unstaged area
13)	Move the file back to the committed stage by committing the file
14)	Run the soft reset command
15)	Run the status – File should be in staged area
16)	Move the file back to the committed stage by committing the file
17)	Run the hard reset command
18)	Run the status – File is deleted
19)	Now commit the changes of deletion of the file.

Steps for revert command
1)	 Make a new dir – revertgit
2)	Add a new file – a.txt
3)	Commit the change with a msg as m1
4)	Add a new file – b.txt
5)	Commit the change with a msg as m2
6)	Add a new file – c.txt
7)	Commit the change with a msg as m3
8)	Run the log
9)	Run the revert with commit id of 3rd commit
10)	Your c.txt gets deleted and a new commit is created for reverting to the stage of 2nd commit completion.
11)	Run the log
12)	The repository is back to the state of 2nd commit

Steps for revert command part2
13)	To bring back the latest commit back to the repo
14)	Run the log
15)	Run the reset to commit 3
16)	But the file is not back into the repo
17)	Run the checkout c.txt
18)	This will bring the file back to our repo.
